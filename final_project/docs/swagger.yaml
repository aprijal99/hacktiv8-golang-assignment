basePath: /
definitions:
  entity.Comment:
    properties:
      created_at:
        type: string
      id:
        type: integer
      message:
        type: string
      photo:
        $ref: '#/definitions/entity.Photo'
      photo_id:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/entity.User'
      user_id:
        type: integer
    type: object
  entity.Photo:
    properties:
      caption:
        type: string
      created_at:
        type: string
      id:
        type: integer
      photo_url:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/entity.User'
      user_id:
        type: integer
    type: object
  entity.SocialMedia:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      social_media_url:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/entity.User'
      user_id:
        type: integer
    type: object
  entity.User:
    properties:
      age:
        type: integer
      comments:
        items:
          $ref: '#/definitions/entity.Comment'
        type: array
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      photos:
        items:
          $ref: '#/definitions/entity.Photo'
        type: array
      social_media:
        items:
          $ref: '#/definitions/entity.SocialMedia'
        type: array
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:4000
info:
  contact:
    email: soberkoder@swagger.io
    name: API Support
  description: This is a sample service for managing MyGram API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: MyGram API
  version: "1.0"
paths:
  /comments:
    get:
      consumes:
      - application/json
      description: Get details of all comments
      produces:
      - application/json
      responses:
        "302":
          description: Found
          schema:
            $ref: '#/definitions/entity.Comment'
      summary: Get details
      tags:
      - comments
    post:
      consumes:
      - application/json
      description: Post details of a new comment
      parameters:
      - description: Comment details
        in: body
        name: entity.Comment
        required: true
        schema:
          $ref: '#/definitions/entity.Comment'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Comment'
      summary: Post details
      tags:
      - comments
  /comments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete the comment corresponding to the input Id
      parameters:
      - description: Id of the comment
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Comment'
      summary: Delete comment identified by the given Id
      tags:
      - comments
    get:
      consumes:
      - application/json
      description: Get details of comment corresponding to the input Id
      parameters:
      - description: Id of the comment
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "302":
          description: Found
          schema:
            $ref: '#/definitions/entity.Comment'
      summary: Get details for a given Id
      tags:
      - comments
    put:
      consumes:
      - application/json
      description: Update the comment corresponding to the input Id
      parameters:
      - description: Id of the comment
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Comment'
      summary: Update comment identified by the given Id
      tags:
      - comments
  /photos:
    get:
      consumes:
      - application/json
      description: Get details of all photos
      produces:
      - application/json
      responses:
        "302":
          description: Found
          schema:
            $ref: '#/definitions/entity.Photo'
      summary: Get details
      tags:
      - photos
    post:
      consumes:
      - application/json
      description: Post details of a new photo
      parameters:
      - description: Photo details
        in: body
        name: entity.Photo
        required: true
        schema:
          $ref: '#/definitions/entity.Photo'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Photo'
      summary: Post details
      tags:
      - photos
  /photos/{id}:
    delete:
      consumes:
      - application/json
      description: Delete the photo corresponding to the input Id
      parameters:
      - description: Id of the photo
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Photo'
      summary: Delete photo identified by the given Id
      tags:
      - photos
    get:
      consumes:
      - application/json
      description: Get details of photo corresponding to the input Id
      parameters:
      - description: Id of the photo
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "302":
          description: Found
          schema:
            $ref: '#/definitions/entity.Photo'
      summary: Get details for a given Id
      tags:
      - photos
    put:
      consumes:
      - application/json
      description: Update the photo corresponding to the input Id
      parameters:
      - description: Id of the photo
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Photo'
      summary: Update photo identified by the given Id
      tags:
      - photos
  /socialmedia:
    get:
      consumes:
      - application/json
      description: Get details of all social media
      produces:
      - application/json
      responses:
        "302":
          description: Found
          schema:
            $ref: '#/definitions/entity.SocialMedia'
      summary: Get details
      tags:
      - social_media
    post:
      consumes:
      - application/json
      description: Post details of a new social media
      parameters:
      - description: Social media details
        in: body
        name: entity.SocialMedia
        required: true
        schema:
          $ref: '#/definitions/entity.SocialMedia'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.SocialMedia'
      summary: Post details
      tags:
      - social_media
  /socialmedia/{id}:
    delete:
      consumes:
      - application/json
      description: Delete the social media corresponding to the input Id
      parameters:
      - description: Id of the social media
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.SocialMedia'
      summary: Delete social media identified by the given Id
      tags:
      - social_media
    get:
      consumes:
      - application/json
      description: Get details of social media corresponding to the input Id
      parameters:
      - description: Id of the social media
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "302":
          description: Found
          schema:
            $ref: '#/definitions/entity.SocialMedia'
      summary: Get details for a given Id
      tags:
      - social_media
    put:
      consumes:
      - application/json
      description: Update the social media corresponding to the input Id
      parameters:
      - description: Id of the social media
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.SocialMedia'
      summary: Update social media identified by the given Id
      tags:
      - social_media
  /users/login:
    post:
      consumes:
      - application/json
      description: User login and get access token
      produces:
      - application/json
      responses:
        "302":
          description: Found
          schema:
            $ref: '#/definitions/entity.User'
      summary: User login
      tags:
      - users
  /users/signup:
    post:
      consumes:
      - application/json
      description: User signup for new user
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.User'
      summary: User signup
      tags:
      - users
swagger: "2.0"
